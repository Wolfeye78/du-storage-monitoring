{"events":[],"handlers":[{"code":"[[--\r\n    Nested Co-routines By Jericho\r\n]]--\r\n\r\nif coroutine.status(MainCoroutine) == \"dead\" then\r\n  MainCoroutine = coroutine.create(runCoroutines)\r\nend\r\nif coroutine.status(MainCoroutine) == \"suspended\" then\r\n  assert(coroutine.resume(MainCoroutine))\r\nend","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"0"},{"code":"if databank ~= nil then\r\n    databank.setStringValue(\"options\", json.encode(options))\r\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"0"},{"code":"--[[\r\n\tLUA PARAMETERS\r\n]]\r\nuseDatabankValues = false --export: if checked and if values were saved in databank, parmaters will be loaded from the databank, if not, following ones will be used\r\n\r\nPrefixScreen1 = \"s1_\" --export: the prefix used to enable container monitoring and display on the 1st screen\r\nPrefixScreen2 = \"s2_\" --export: the prefix used to enable container monitoring and display on the 2nd screen\r\nPrefixScreen3 = \"s3_\" --export: the prefix used to enable container monitoring and display on the 3rd screen\r\nPrefixScreen4 = \"s4_\" --export: the prefix used to enable container monitoring and display on the 4th screen\r\nPrefixScreen5 = \"s5_\" --export: the prefix used to enable container monitoring and display on the 5th screen\r\nPrefixScreen6 = \"s6_\" --export: the prefix used to enable container monitoring and display on the 6th screen\r\nPrefixScreen7 = \"s7_\" --export: the prefix used to enable container monitoring and display on the 7th screen\r\nPrefixScreen8 = \"s8_\" --export: the prefix used to enable container monitoring and display on the 8th screen\r\nPrefixScreen9 = \"s9_\" --export: the prefix used to enable container monitoring and display on the 9th screen\r\n\r\nscreenTitle1 = \"-\" --export: the title display on the 1st screen, not displayed if empty or equal to \"-\"\r\nscreenTitle2 = \"-\" --export: the title display on the 2nd screen, not displayed if empty or equal to \"-\"\r\nscreenTitle3 = \"-\" --export: the title display on the 3rd screen, not displayed if empty or equal to \"-\"\r\nscreenTitle4 = \"-\" --export: the title display on the 4th screen, not displayed if empty or equal to \"-\"\r\nscreenTitle5 = \"-\" --export: the title display on the 5th screen, not displayed if empty or equal to \"-\"\r\nscreenTitle6 = \"-\" --export: the title display on the 6th screen, not displayed if empty or equal to \"-\"\r\nscreenTitle7 = \"-\" --export: the title display on the 7th screen, not displayed if empty or equal to \"-\"\r\nscreenTitle8 = \"-\" --export: the title display on the 8th screen, not displayed if empty or equal to \"-\"\r\nscreenTitle9 = \"-\" --export: the title display on the 9th screen, not displayed if empty or equal to \"-\"\r\n\r\ncontainerProficiencyLvl = 5 --export: Talent level for Container Proficiency\r\ncontainerOptimizationLvl = 5 --export: Talent level for Container Optimization\r\ngroupByItemName = true --export: if enabled, this will group all entries with the same item name\r\n\r\nVolumeRoundedDecimals = 2 --export: maximum of decimals displayed for the volume value\r\nQuantityRoundedDecimals = 2 --export: maximum of decimals displayed for the quantity value\r\nPercentRoundedDecimals = 2 --export: maximum of decimals displayed for the percent fill value\r\nfontSize = 15 --export: the size of the text for all the screen\r\nmaxAmountOfElementsLoadedByTick = 5000 --export: the maximum number of element loaded by tick of the coroutine on script startup\r\nmaxAmountOfElementsRefreshedByTick = 200 --export: the maximum number of element refreshed by tick of the coroutine when refreshing values\r\n\r\nshowTierColors=true --export: show a diffenrent color for each tier (https://du-lua.dev/#/utils for help on the color values)\r\nT1Color= '0.43,0.65,0.71' --export: the rgb values for the T2 color (https://du-lua.dev/#/utils for help on the color values)\r\nT2Color= '0.14,0.7,0.3' --export: the rgb values for the T2 color (https://du-lua.dev/#/utils for help on the color values)\r\nT3Color= '0.26,0.63,1' --export: the rgb values for the T2 color (https://du-lua.dev/#/utils for help on the color values)\r\nT4Color= '0.66,0.28,0.66' --export: the rgb values for the T2 color (https://du-lua.dev/#/utils for help on the color values)\r\nT5Color= '1,0.62,0.24' --export: the rgb values for the T2 color (https://du-lua.dev/#/utils for help on the color values)\r\nshowTierOnName = true --export: show the tier of the item with the item name\r\nshowVolume = true --export: show or hide the column Volume\r\nvolumePosition= 55 --export: the position in percent of width for the column Volume\r\nshowQuantity = true --export: show or hide the column Quantity\r\nquantityPosition= 75 --export: the position in percent of width for the column Quantity\r\n\r\nverticalMode = true --export: rotate the screen 90deg (bottom on right)\r\nverticalModeBottomSide = \"right\" --export: when vertical mode is enabled, on which side the bottom of the screen is positioned (\"left\" or \"right\")\r\ndefaultSorting = \"none\" --export: the default sorting of items on the screen: \"none\": like in the container, \"items-asc\": ascending sorting on the name, \"items-desc\": descending sorting on the name, \"quantity-asc\": ascending on the quantity, \"quantity-desc\": descending on the quantity, \"percent-asc\": ascending on the percent fill, \"percent-desc\": descending on the percent fill\r\n\r\n--[[\r\n\tINIT\r\n]]\r\n\r\nlocal version = '4.9.0'\r\n\r\nsystem.print(\"----------------------------------\")\r\nsystem.print(\"DU-Storage-Monitoring version \" .. version)\r\nsystem.print(\"----------------------------------\")\r\n\r\noptions = {}\r\noptions.containerMonitoringPrefix_screen1 = PrefixScreen1\r\noptions.containerMonitoringPrefix_screen2 = PrefixScreen2\r\noptions.containerMonitoringPrefix_screen3 = PrefixScreen3\r\noptions.containerMonitoringPrefix_screen4 = PrefixScreen4\r\noptions.containerMonitoringPrefix_screen5 = PrefixScreen5\r\noptions.containerMonitoringPrefix_screen6 = PrefixScreen6\r\noptions.containerMonitoringPrefix_screen7 = PrefixScreen7\r\noptions.containerMonitoringPrefix_screen8 = PrefixScreen8\r\noptions.containerMonitoringPrefix_screen9 = PrefixScreen9\r\noptions.screenTitle1 = screenTitle1\r\noptions.screenTitle2 = screenTitle2\r\noptions.screenTitle3 = screenTitle3\r\noptions.screenTitle4 = screenTitle4\r\noptions.screenTitle5 = screenTitle5\r\noptions.screenTitle6 = screenTitle6\r\noptions.screenTitle7 = screenTitle7\r\noptions.screenTitle8 = screenTitle8\r\noptions.screenTitle9 = screenTitle9\r\noptions.container_proficiency_lvl = containerProficiencyLvl\r\noptions.container_optimization_lvl = containerOptimizationLvl\r\noptions.groupByItemName = groupByItemName\r\noptions.VolumeRoundedDecimals = VolumeRoundedDecimals\r\noptions.QuantityRoundedDecimals = QuantityRoundedDecimals\r\noptions.PercentRoundedDecimals = PercentRoundedDecimals\r\noptions.fontSize = fontSize\r\noptions.maxAmountOfElementsLoadedByTick = maxAmountOfElementsLoadedByTick\r\noptions.maxAmountOfElementsRefreshedByTick = maxAmountOfElementsRefreshedByTick\r\noptions.showVolume = showVolume\r\noptions.volumePosition = volumePosition\r\noptions.showQuantity = showQuantity\r\noptions.showTierOnName = showTierOnName\r\noptions.showTierColors = showTierColors\r\noptions.T1Color = T1Color\r\noptions.T2Color = T2Color\r\noptions.T3Color = T3Color\r\noptions.T4Color = T4Color\r\noptions.T5Color = T5Color\r\noptions.quantityPosition = quantityPosition\r\noptions.verticalMode = verticalMode\r\noptions.verticalModeBottomSide = verticalModeBottomSide\r\noptions.defaultSorting = defaultSorting\r\n\r\n\r\n--[[\r\n\tsplit a string on a delimiter By jericho\r\n]]\r\nfunction strSplit(a,b)result={}for c in(a..b):gmatch(\"(.-)\"..b)do table.insert(result,c)end;return result end\r\n\r\n--[[\r\n    return RGB colors calculated from a gradient between two colors\r\n]]\r\nfunction getRGBGradient(a,b,c,d,e,f,g,h,i,j)a=-1*math.cos(a*math.pi)/2+0.5;local k=0;local l=0;local m=0;if a>=.5 then a=(a-0.5)*2;k=e-a*(e-h)l=f-a*(f-i)m=g-a*(g-j)else a=a*2;k=b-a*(b-e)l=c-a*(c-f)m=d-a*(d-g)end;return k,l,m end\r\n\r\n--[[\r\n\tformatting numbers by adding a space between thousands by Jericho\r\n]]\r\nfunction format_number(a)local b=a;while true do b,k=string.gsub(b,\"^(-?%d+)(%d%d%d)\",'%1 %2')if k==0 then break end end;local c=string.sub(b,-2)if c=='.0'then b=string.sub(b,1,b:len()-2)end;return b end\r\n\r\ncore = nil\r\ndatabank = nil\r\nscreens = {}\r\nfor slot_name, slot in pairs(unit) do\r\n    if\r\n    type(slot) == \"table\"\r\n            and type(slot.export) == \"table\"\r\n            and slot.getClass\r\n    then\r\n        if slot.getClass():lower():find(\"coreunit\") then\r\n            core = slot\r\n        end\r\n        if slot.getClass():lower() == 'screenunit' then\r\n            slot.slotname = slot_name\r\n            table.insert(screens,slot)\r\n        end\r\n        if slot.getClass():lower() == 'databankunit' then\r\n            databank = slot\r\n        end\r\n    end\r\nend\r\n\r\nif #screens == 0 then\r\n    system.print(\"No Screen Detected\")\r\nelse\r\n    --sorting screens by slotname to be sure the display is not changing\r\n    table.sort(screens, function(a,b) return a.slotname < b.slotname end)\r\n    local plural = \"\"\r\n    if #screens > 1 then plural = \"s\" end\r\n    system.print(#screens .. \" screen\" .. plural .. \" Connected\")\r\nend\r\nif core == nil then\r\n    system.print(\"No Core Detected\")\r\nelse\r\n    system.print(\"Core Connected\")\r\nend\r\nif databank == nil then\r\n    system.print(\"No Databank Detected\")\r\nelse\r\n    system.print(\"Databank Connected\")\r\n    if (databank.hasKey(\"options\")) and (useDatabankValues == true) then\r\n        local db_options = json.decode(databank.getStringValue(\"options\"))\r\n        for key, value in pairs(options) do\r\n            if db_options[key] then options[key] = db_options[key] end\r\n        end\r\n        system.print(\"Options Loaded From Databank\")\r\n    else\r\n        system.print(\"Options Loaded From LUA Parameters\")\r\n    end\r\nend\r\nprefixes = {\r\n    options.containerMonitoringPrefix_screen1,\r\n    options.containerMonitoringPrefix_screen2,\r\n    options.containerMonitoringPrefix_screen3,\r\n    options.containerMonitoringPrefix_screen4,\r\n    options.containerMonitoringPrefix_screen5,\r\n    options.containerMonitoringPrefix_screen6,\r\n    options.containerMonitoringPrefix_screen7,\r\n    options.containerMonitoringPrefix_screen8,\r\n    options.containerMonitoringPrefix_screen9\r\n}\r\ntitles = {\r\n    options.screenTitle1,\r\n    options.screenTitle2,\r\n    options.screenTitle3,\r\n    options.screenTitle4,\r\n    options.screenTitle5,\r\n    options.screenTitle6,\r\n    options.screenTitle7,\r\n    options.screenTitle8,\r\n    options.screenTitle9\r\n}\r\n\r\n\r\nlocal sorting=0\r\nif options.defaultSorting==\"items-asc\" then sorting = 1\r\nelseif options.defaultSorting==\"items-desc\" then sorting = 2\r\nelseif options.defaultSorting==\"quantity-asc\" then sorting = 3\r\nelseif options.defaultSorting==\"quantity-desc\" then sorting = 4\r\nelseif options.defaultSorting==\"percent-asc\" then sorting = 5\r\nelseif options.defaultSorting==\"percent-desc\" then sorting = 6\r\nend\r\n\r\nfunction getRenderScript(data, screenTitle)\r\n    local rs = [[\r\n    local vmode = ]] .. tostring(options.verticalMode) .. [[\r\n\r\n    local vmode_side = \"]] .. options.verticalModeBottomSide .. [[\"\r\n    if sorting == nil then sorting = ]] .. sorting .. [[ end\r\n    ]]\r\n    if data == nil then\r\n        rs = rs .. [[local json = require('dkjson')\r\n        local input = getInput() or json.encode(nil)\r\n        local data = json.decode(input)\r\n        if data ~= nil and data[7] then\r\n            items = {}\r\n            page = 1\r\n            screenTitle = data[6] or \"\"\r\n        else\r\n            if items == nil then items = {} end\r\n            if page == nil then page = 1 end\r\n            if screenTitle == nil then\r\n                screenTitle = \"-\"\r\n                if data then\r\n                    screenTitle = data[6] or \"\"\r\n                end\r\n            end\r\n        end\r\n        ]]\r\n    end\r\n    rs = rs .. [[local images = {}\r\n    ]]\r\n    if data == nil then\r\n        rs = rs .. [[if data ~= {} and data ~= nil then\r\n            items[data[11] ] = {data[1],data[2],data[3],data[4],data[5],data[8],data[10],data[12]}\r\n            setOutput(#items)\r\n            data = nil\r\n        end\r\n        ]]\r\n    else\r\n        rs = rs .. 'items=' .. data .. [[\r\n\r\n        ]]\r\n        if screenTitle ~= nil then\r\n            rs = rs .. \"screenTitle='\" .. screenTitle .. [['\r\n            ]]\r\n        end\r\n    end\r\n    rs = rs .. [[local rx,ry = getResolution()\r\n        local cx, cy = getCursor()\r\n        if vmode then\r\n            ry,rx = getResolution()\r\n            cy, cx = getCursor()\r\n            cx = rx - cx\r\n            if vmode_side == \"right\" then\r\n                cy = ry - cy\r\n                cx = rx - cx\r\n            end\r\n        end\r\n        local back=createLayer()\r\n        local front=createLayer()\r\n        font_size = ]] .. options.fontSize .. [[\r\n\r\n        local mini=loadFont('Play',12)\r\n        local small=loadFont('Play',14)\r\n        local smallBold=loadFont('Play-Bold',18)\r\n        local itemName=loadFont('Play-Bold',font_size)\r\n        local medV=loadFont('Play-Bold', 25)\r\n        local bigV=loadFont('Play-Bold', 30)\r\n        local big=loadFont('Play',38)\r\n        setBackgroundColor( 15/255,24/255,29/255)\r\n        setDefaultStrokeColor( back,Shape_Line,0,0,0,0.5)\r\n        setDefaultShadow( back,Shape_Line,6,0,0,0,0.5)\r\n        setDefaultFillColor( front,Shape_BoxRounded,249/255,212/255,123/255,1)\r\n        setDefaultFillColor( front,Shape_Text,0,0,0,1)\r\n        setDefaultFillColor( front,Shape_Box,0.075,0.125,0.156,1)\r\n        setDefaultFillColor( front,Shape_Text,0.710,0.878,0.941,1)\r\n        function format_number(a)local b=a;while true do b,k=string.gsub(b,\"^(-?%d+)(%d%d%d)\",'%1 %2')if k==0 then break end end;local c=string.sub(b,-2)if c=='.0'then b=string.sub(b,1,b:len()-2)end;return b end\r\n        function round(a,b)if b==nil then b=0 end;return math.floor(a*10^b+0.5)/10^b end\r\n        function getRGBGradient(a,b,c,d,e,f,g,h,i,j)a=-1*math.cos(a*math.pi)/2+0.5;local k=0;local l=0;local m=0;if a>=.5 then a=(a-0.5)*2;k=e-a*(e-h)l=f-a*(f-i)m=g-a*(g-j)else a=a*2;k=b-a*(b-e)l=c-a*(c-f)m=d-a*(d-g)end;return k,l,m end\r\n        function renderHeader(title, subtitle)\r\n            local h_factor = 12\r\n            local h = 35\r\n            if subtitle ~= nil and subtitle ~= \"\" and subtitle ~= \"-\" then\r\n                h = 50\r\n            end\r\n            addLine( back,0,h+12,rx,h+12)\r\n            addBox(front,0,12,rx,h)\r\n            if subtitle ~= nil and subtitle ~= \"\" and subtitle ~= \"-\" then\r\n                addText(front,big,subtitle,44,50)\r\n                setNextTextAlign(front, AlignH_Right, AlignV_Middle)\r\n                addText(front,smallBold,title,rx-44,40)\r\n            else\r\n                addText(front,smallBold,title,44,35)\r\n            end\r\n        end\r\n        local storageBar = createLayer()\r\n        setDefaultFillColor(storageBar,Shape_Text,110/255,166/255,181/255,1)\r\n        setDefaultFillColor(storageBar,Shape_Box,0.075,0.125,0.156,1)\r\n        setDefaultFillColor(storageBar,Shape_Line,1,1,1,1)\r\n        local storageDark = createLayer()\r\n        setDefaultFillColor(storageDark,Shape_Text,63/255,92/255,102/255,1)\r\n        setDefaultFillColor(storageDark,Shape_Box,13/255,24/255,28/255,1)\r\n        local buttonHover = createLayer()\r\n        setDefaultFillColor(buttonHover,Shape_Box,249/255,212/255,123/255,1)\r\n        setDefaultFillColor(buttonHover,Shape_Text,0,0,0,1)\r\n        local colorLayer = createLayer()\r\n        local imagesLayer = createLayer()\r\n        if vmode then\r\n            local r = 90\r\n            local tx = ry\r\n            local ty = 0\r\n            if vmode_side == \"left\" then\r\n                r = r + 180\r\n                tx = 0\r\n                ty = rx\r\n            end\r\n            setLayerTranslation(back, tx,ty)\r\n            setLayerRotation(back, math.rad(r))\r\n            setLayerTranslation(front, tx, ty)\r\n            setLayerRotation(front, math.rad(r))\r\n            setLayerTranslation(storageBar, tx, ty)\r\n            setLayerRotation(storageBar, math.rad(r))\r\n            setLayerTranslation(colorLayer, tx, ty)\r\n            setLayerRotation(colorLayer, math.rad(r))\r\n            setLayerTranslation(imagesLayer, tx, ty)\r\n            setLayerRotation(imagesLayer, math.rad(r))\r\n            setLayerTranslation(buttonHover, tx, ty)\r\n            setLayerRotation(buttonHover, math.rad(r))\r\n            setLayerTranslation(storageDark, tx, ty)\r\n            setLayerRotation(storageDark, math.rad(r))\r\n        end\r\n        function renderResistanceBar(title, tier, quantity, volume, max, percent, icon_path, item_id, x, y, w, h, withTitle, withIcon)\r\n            local colorPercent = percent\r\n            if percent > 100 then colorPercent = 100 end\r\n            local r,g,b = getRGBGradient(colorPercent/100,177/255,42/255,42/255,249/255,212/255,123/255,34/255,177/255,76/255)\r\n            local quantity_x_pos = font_size * 6.7\r\n            local percent_x_pos = font_size * 2\r\n            addBox(storageBar,x,y,w,h)\r\n            if withTitle then\r\n                local title_item_layer = storageBar\r\n                local title_item = 'ITEMS'\r\n                local title_item_width = 50\r\n                if sorting > 0 and sorting <= 2 then\r\n                    if sorting == 1 then\r\n                        title_item_width = 90\r\n                        title_item = 'ITEMS - ASC'\r\n                    elseif sorting == 2 then\r\n                        title_item_width = 95\r\n                        title_item = 'ITEMS - DESC'\r\n                    end\r\n                    title_item_layer = buttonHover\r\n                end\r\n                if cx >= (x-5) and cx <= (x+title_item_width-5) and cy >= (y-19) and cy <= (y-19+h/1.5) then\r\n                    title_item_layer = buttonHover\r\n                    if getCursorPressed() then\r\n                        if sorting == 0 or sorting > 2 then sorting = 1\r\n                        elseif sorting == 1 then sorting = 2\r\n                        elseif sorting == 2 then sorting = 0\r\n                        end\r\n                    end\r\n                end\r\n                addBox(title_item_layer, x-5, y-19, title_item_width, h/1.5)\r\n                setNextTextAlign(title_item_layer, AlignH_Left, AlignV_Bottom)\r\n                addText(title_item_layer, small, title_item, x, y-5)\r\n                if ]] .. tostring(options.showVolume) .. [[ then\r\n                    setNextTextAlign(storageDark, AlignH_Center, AlignV_Bottom)\r\n                    addText(storageDark, small, \"VOLUME\", x+(w*]] .. tostring(options.volumePosition/100) .. [[), y-5)\r\n                end\r\n                if ]] .. tostring(options.showQuantity) .. [[ then\r\n                    local title_quantity_layer = storageBar\r\n                    local title_quantity = 'QUANTITY'\r\n                    local title_quantity_width = 75\r\n                    if sorting >= 3 and sorting <= 4 then\r\n                        if sorting == 3 then\r\n                            title_quantity_width = 105\r\n                            title_quantity = 'QUANTITY - ASC'\r\n                        elseif sorting == 4 then\r\n                            title_quantity_width = 115\r\n                            title_quantity = 'QUANTITY - DESC'\r\n                        end\r\n                        title_quantity_layer = buttonHover\r\n                    end\r\n                    local title_quantity_x = x+(w*]] .. tostring(options.quantityPosition/100) .. [[)\r\n                    if cx >= (title_quantity_x-title_quantity_width/2) and cx <= (title_quantity_x+title_quantity_width/2) and cy >= (y-19) and cy <= (y-19+h/1.5) then\r\n                        title_quantity_layer = buttonHover\r\n                        if getCursorPressed() then\r\n                            if sorting < 3 or sorting > 4 then sorting = 3\r\n                            elseif sorting == 3 then sorting = 4\r\n                            elseif sorting == 4 then sorting = 0\r\n                            end\r\n                        end\r\n                    end\r\n                    addBox(title_quantity_layer, title_quantity_x-title_quantity_width/2, y-19, title_quantity_width, h/1.5)\r\n                    setNextTextAlign(title_quantity_layer, AlignH_Center, AlignV_Bottom)\r\n                    addText(title_quantity_layer, small, title_quantity, title_quantity_x, y-5)\r\n                end\r\n                local title_percent_layer = storageBar\r\n                local title_percent = 'STORAGE'\r\n                local title_percent_width = 75\r\n                if sorting >= 5 and sorting <= 6 then\r\n                    if sorting == 5 then\r\n                        title_percent_width = 105\r\n                        title_percent = 'STORAGE - ASC'\r\n                    elseif sorting == 6 then\r\n                        title_percent_width = 115\r\n                        title_percent = 'STORAGE - DESC'\r\n                    end\r\n                    title_percent_layer = buttonHover\r\n                end\r\n                if cx >= (rx-x+5-title_percent_width) and cx <= (rx-x+5) and cy >= (y-19) and cy <= (y-19+h/1.5) then\r\n                    title_percent_layer = buttonHover\r\n                    if getCursorPressed() then\r\n                        if sorting < 5 then sorting = 5\r\n                        elseif sorting == 5 then sorting = 6\r\n                        elseif sorting == 6 then sorting = 0\r\n                        end\r\n                    end\r\n                end\r\n                addBox(title_percent_layer, rx-x+5-title_percent_width, y-19, title_percent_width, h/1.5)\r\n                setNextTextAlign(title_percent_layer, AlignH_Right, AlignV_Bottom)\r\n                addText(title_percent_layer, small, title_percent, rx-x, y-5)\r\n            end\r\n            local pos_y = y+(h/2)-2\r\n            if icon_path and images[icon_path] then\r\n                addImage(imagesLayer, images[icon_path], x+10, y+font_size*.1, font_size*1.3, font_size*1.2)\r\n            end\r\n            setNextTextAlign(storageBar, AlignH_Left, AlignV_Middle)\r\n            local n = title\r\n            if ]] .. tostring(options.showTierOnName) .. [[ then\r\n                n = 'T' .. tier .. ' / ' .. n\r\n            end]]\r\n    if options.showTierColors then\r\n        rs = rs .. [[\r\n                if tier == 1 then\r\n                    setNextFillColor(storageBar, ]] .. options.T1Color .. [[, 1)\r\n                elseif tier == 2 then\r\n                    setNextFillColor(storageBar, ]] .. options.T2Color .. [[, 1)\r\n                elseif tier == 3 then\r\n                    setNextFillColor(storageBar, ]] .. options.T3Color .. [[, 1)\r\n                elseif tier == 4 then\r\n                    setNextFillColor(storageBar, ]] .. options.T4Color .. [[, 1)\r\n                elseif tier == 5 then\r\n                    setNextFillColor(storageBar, ]] .. options.T5Color .. [[, 1)\r\n                end]]\r\n    end\r\n    rs = rs .. [[\r\n            addText(storageBar, itemName, n, x+20+font_size, pos_y)\r\n            setNextFillColor(colorLayer, r, g, b, 1)\r\n            addBox(colorLayer,x,y+h-3,w*(colorPercent)/100,3)\r\n            if ]] .. tostring(options.showVolume) .. [[ then\r\n                setNextTextAlign(storageDark, AlignH_Center, AlignV_Middle)\r\n                local unit = 'L'\r\n                if max >= 100000 then\r\n                    max = round(max/1000,]] .. options.VolumeRoundedDecimals .. [[)\r\n                    volume = round(volume/1000, ]] .. options.VolumeRoundedDecimals .. [[)\r\n                    unit='kL'\r\n                end\r\n                addText(storageDark, itemName, format_number(volume) .. ' ' .. unit .. ' / ' .. format_number(max) .. ' ' .. unit, x+(w*]] .. tostring(options.volumePosition/100) .. [[), pos_y)\r\n            end\r\n            if ]] .. tostring(options.showQuantity) .. [[ then\r\n                setNextTextAlign(storageBar, AlignH_Center, AlignV_Middle)\r\n                addText(storageBar, itemName, format_number(quantity), x+(w*]] .. tostring(options.quantityPosition/100) .. [[), pos_y)\r\n            end\r\n            setNextFillColor(colorLayer, r, g, b, 1)\r\n            setNextTextAlign(colorLayer, AlignH_Right, AlignV_Middle)\r\n            addText(colorLayer, itemName, format_number(percent) ..\"%\", rx-x-5, pos_y)\r\n        end\r\n        local main_title = 'STORAGE MONITORING v]] .. version .. [['\r\n        if ]] .. tostring(options.verticalMode) .. [[ and screenTitle ~= nil and screenTitle ~= \"\" and screenTitle ~= \"-\" then\r\n            main_title = 'v]] .. version .. [['\r\n        end\r\n        renderHeader(main_title, screenTitle)\r\n\r\n        start_h = 75\r\n        if screenTitle ~= nil and screenTitle ~= \"\" and screenTitle ~= \"-\" then\r\n            start_h = 100\r\n        end\r\n        local sorted_items = {}\r\n        for i,v in pairs(items) do\r\n            table.insert(sorted_items, v)\r\n        end\r\n        if sorting == 1 then table.sort(sorted_items, function(a, b) return a[1] < b[1] end)\r\n        elseif sorting == 2 then table.sort(sorted_items, function(a, b) return a[1] > b[1] end)\r\n        elseif sorting == 3 then table.sort(sorted_items, function(a, b) return a[2] < b[2] end)\r\n        elseif sorting == 4 then table.sort(sorted_items, function(a, b) return a[2] > b[2] end)\r\n        elseif sorting == 5 then table.sort(sorted_items, function(a, b) return a[4] < b[4] end)\r\n        elseif sorting == 6 then table.sort(sorted_items, function(a, b) return a[4] > b[4] end)\r\n        end\r\n        local h = font_size + font_size / 2\r\n        local loadedImages = 0\r\n        if data ~= {} then\r\n            for _,item in ipairs(sorted_items) do\r\n                if item[1] and images[item[5] ] == nil and loadedImages <= 15 then\r\n                    loadedImages = loadedImages + 1\r\n                    images[item[5] ] = loadImage(item[5])\r\n                end\r\n            end\r\n        end\r\n        for i,container in ipairs(sorted_items) do\r\n            renderResistanceBar(container[1], container[8], container[2], container[3], container[7], container[4], container[5], container[6], 44, start_h, rx-88, h, i==1, i<=16)\r\n            start_h = start_h+h+5\r\n        end\r\n        requestAnimationFrame(10)\r\n    ]]\r\n    return rs\r\nend\r\n\r\nlocal renderScript = getRenderScript()\r\n\r\nfor _,s in pairs(screens) do\r\n    s.setRenderScript(renderScript)\r\nend\r\n\r\nelementsIdList = {}\r\nif core ~= nil then\r\n    elementsIdList = core.getElementIdList()\r\nend\r\nstorageIdList= {}\r\ninitIndex = 0\r\ninitFinished = false\r\nscreens_displayed = false\r\n\r\n--Nested Coroutines by Jericho\r\ncoroutinesTable  = {}\r\n--all functions here will become a coroutine\r\nMyCoroutines = {\r\n    function()\r\n        if not initFinished then\r\n            system.print(\"Loading contructs elements (\" .. #elementsIdList .. \" elements detected)\")\r\n            for i = 1, #elementsIdList, 1 do\r\n                initIndex = i\r\n                local id = elementsIdList[i]\r\n                local elementType = core.getElementDisplayNameById(id):lower()\r\n                if elementType:lower():find(\"container\") then\r\n                    table.insert(storageIdList, id)\r\n                end\r\n                if (i%options.maxAmountOfElementsLoadedByTick) == 0 then\r\n                    system.print(i .. ' elements scanned on ' .. #elementsIdList .. ' with ' .. #storageIdList .. \" identified\")\r\n                    coroutine.yield(coroutinesTable[1])\r\n                end\r\n            end\r\n            if initIndex == #elementsIdList then\r\n                system.print(#elementsIdList .. \" scanned with \" .. #storageIdList .. \" storage elements identified\")\r\n                initFinished = true\r\n            end\r\n        end\r\n    end,\r\n    function()\r\n        if not screens_displayed then\r\n            local html = ''\r\n            local storage_elements = {}\r\n            for elemindex,id in ipairs(storageIdList) do\r\n                local elementType = core.getElementDisplayNameById(id)\r\n                if elementType:lower():find(\"container\") then\r\n                    local elementName = core.getElementNameById(id)\r\n                    if elementName:lower():find(prefixes[1]:lower())\r\n                            or elementName:lower():find(prefixes[2]:lower())\r\n                            or elementName:lower():find(prefixes[3]:lower())\r\n                            or elementName:lower():find(prefixes[4]:lower())\r\n                            or elementName:lower():find(prefixes[5]:lower())\r\n                            or elementName:lower():find(prefixes[6]:lower())\r\n                            or elementName:lower():find(prefixes[7]:lower())\r\n                            or elementName:lower():find(prefixes[8]:lower())\r\n                            or elementName:lower():find(prefixes[9]:lower())\r\n                    then\r\n                        local container = {}\r\n                        local splitted = strSplit(elementName, '_')\r\n                        local name = splitted[2]\r\n                        local ingredient = system.getItem(name)\r\n                        local container_size = \"XS\"\r\n                        local container_amount = 1\r\n                        local container_empty_mass = 0\r\n                        local container_volume = 0\r\n                        local contentQuantity = 0\r\n                        local percent_fill = 0\r\n                        if not elementType:lower():find(\"hub\") then\r\n                            local containerMaxHP = core.getElementMaxHitPointsById(id)\r\n                            if containerMaxHP > 68000 then\r\n                                if splitted[3] then\r\n                                    container_size = splitted[3]\r\n                                    container_volume = tonumber(container_size) * ingredient.volume\r\n                                else\r\n                                    container_size = \"XXL\"\r\n                                    container_volume = 512000 * (options.container_proficiency_lvl * 0.1) + 512000\r\n                                end\r\n                                container_empty_mass = getIngredient(\"Expanded Container XL\").mass\r\n                            elseif containerMaxHP > 33000 then\r\n                                if splitted[3] then\r\n                                    container_size = splitted[3]\r\n                                    container_volume = tonumber(container_size) * ingredient.volume\r\n                                else\r\n                                    container_size = \"XL\"\r\n                                    container_volume = 256000 * (options.container_proficiency_lvl * 0.1) + 256000\r\n                                end\r\n                                container_empty_mass = getIngredient(\"Container XL\").mass\r\n                            elseif containerMaxHP > 17000 then\r\n                                if splitted[3] then\r\n                                    container_size = splitted[3]\r\n                                    container_volume = tonumber(container_size) * ingredient.volume\r\n                                else\r\n                                    container_size = \"L\"\r\n                                    container_volume = 128000 * (options.container_proficiency_lvl * 0.1) + 128000\r\n                                end\r\n                                container_empty_mass = getIngredient(\"Container L\").mass\r\n                            elseif containerMaxHP > 7900 then\r\n                                if splitted[3] then\r\n                                    container_size = splitted[3]\r\n                                    container_volume = tonumber(container_size) * ingredient.volume\r\n                                else\r\n                                    container_size = \"M\"\r\n                                    container_volume = 64000 * (options.container_proficiency_lvl * 0.1) + 64000\r\n                                end\r\n                                container_empty_mass = getIngredient(\"Container M\").mass\r\n                            elseif containerMaxHP > 900 then\r\n                                if splitted[3] then\r\n                                    container_size = splitted[3]\r\n                                    container_volume = tonumber(container_size) * ingredient.volume\r\n                                else\r\n                                    container_size = \"S\"\r\n                                    container_volume = 8000 * (options.container_proficiency_lvl * 0.1) + 8000\r\n                                end\r\n                                container_empty_mass = getIngredient(\"Container S\").mass\r\n                            else\r\n                                if splitted[3] then\r\n                                    container_size = splitted[3]\r\n                                    container_volume = tonumber(container_size) * ingredient.volume\r\n                                else\r\n                                    container_size = \"XS\"\r\n                                    container_volume = 1000 * (options.container_proficiency_lvl * 0.1) + 1000\r\n                                end\r\n                                container_empty_mass = getIngredient(\"Container XS\").mass\r\n                            end\r\n                        else\r\n                            if splitted[3] then\r\n                                container_size = splitted[3]\r\n                            end\r\n                            if splitted[4] then \r\n                                container_amount = splitted[4]\r\n                            end\r\n                            local volume = 0\r\n                            local maintain = 0\r\n                            if container_size:lower() == \"xxl\" then volume = 512000\r\n                            elseif container_size:lower() == \"xl\" then volume = 256000\r\n                            elseif container_size:lower() == \"l\" then volume = 128000\r\n                            elseif container_size:lower() == \"m\" then volume = 64000\r\n                            elseif container_size:lower() == \"s\" then volume = 8000\r\n                            elseif container_size:lower() == \"xs\" then volume = 1000\r\n                            else volume = tonumber(container_size)\r\n                                maintain = 1\r\n                            end\r\n                            if maintain == 1 then\r\n                                container_volume = volume * ingredient.volume\r\n                            else\r\n                            container_volume = volume * (options.container_proficiency_lvl * 0.1) + volume\r\n                            container_volume = container_volume * tonumber(container_amount)\r\n                            end\r\n                            container_empty_mass = 55.8\r\n                        end\r\n                        local totalMass = core.getElementMassById(id)\r\n                        local contentMassKg = totalMass - container_empty_mass\r\n                        container.id = id\r\n                        container.itemid = ingredient.id\r\n                        container.realName = elementName\r\n                        container.prefix = splitted[1] .. \"_\"\r\n                        container.name = name\r\n                        container.ingredient = ingredient\r\n                        container.quantity = contentMassKg / (ingredient.unitMass - (ingredient.unitMass * (options.container_optimization_lvl * 0.05)))\r\n                        container.maxvolume = container_volume\r\n                        container.percent = utils.round((ingredient.unitVolume * container.quantity) * 100 / container_volume)\r\n                        if ingredient.name == \"InvalidItem\" then\r\n                            container.percent = 0\r\n                            container.quantity = 0\r\n                        end\r\n                        container.volume = container.quantity * ingredient.unitVolume\r\n                        if container.percent > 100 then container.percent = 100 end\r\n                        table.insert(storage_elements, container)\r\n                    end\r\n                end\r\n                if (elemindex%options.maxAmountOfElementsRefreshedByTick) == 0 then\r\n                    coroutine.yield(coroutinesTable[2])\r\n                end\r\n            end\r\n\r\n            -- group by name and screen\r\n            local groupped = {}\r\n            if groupByItemName then\r\n                for _,v in pairs(storage_elements) do\r\n                    local prefix = v.prefix:lower()\r\n                    if groupped[prefix .. v.itemid] then\r\n                        groupped[prefix .. v.itemid].quantity = groupped[prefix .. v.itemid].quantity + v.quantity\r\n                        groupped[prefix .. v.itemid].volume = groupped[prefix .. v.itemid].volume + v.volume\r\n                        groupped[prefix .. v.itemid].maxvolume = groupped[prefix .. v.itemid].maxvolume + v.maxvolume\r\n                        groupped[prefix .. v.itemid].percent = groupped[prefix .. v.itemid].volume * 100 / groupped[prefix .. v.itemid].maxvolume\r\n                    else\r\n                        groupped[prefix .. v.itemid] = v\r\n                    end\r\n                end\r\n            else\r\n                groupped = storage_elements\r\n            end\r\n\r\n            -- sorting by tier\r\n            local tiers = {}\r\n            tiers[1] = {} --tier 0 (thx to Belorion#3127 for pointing Oxygen and Hydrogen are Tier 0 and not 1)\r\n            tiers[2] = {} --tier 1\r\n            tiers[3] = {} --tier 2\r\n            tiers[4] = {} --tier 3\r\n            tiers[5] = {} --tier 4\r\n            tiers[6] = {} --tier 5\r\n\r\n            for _,v in pairs(groupped) do\r\n                table.insert(tiers[v.ingredient.tier+1],v)\r\n            end\r\n\r\n            -- sorting by name\r\n            for k,v in pairs(tiers) do\r\n                table.sort(tiers[k], function(a,b) return a.ingredient.locDisplayNameWithSize:lower() < b.ingredient.locDisplayNameWithSize:lower() end)\r\n            end\r\n\r\n            if #screens > 0 and not screens_displayed then\r\n                for index, screen in pairs(screens) do\r\n                    local prefix = prefixes[index]\r\n                    local title = titles[index]\r\n                    local refreshScreen=true\r\n                    local i = 1\r\n                    local items_data_for_screen = {}\r\n                    for tier_k,tier in pairs(tiers) do\r\n                        for _,container in pairs(tier) do\r\n                            if container.prefix:lower():find(prefix:lower()) then\r\n                                local item_name = container.ingredient.locDisplayNameWithSize\r\n                                if container.ingredient.name == 'InvalidItem' then\r\n                                    item_name = 'Invalid Item Id'\r\n                                end\r\n                                local storage_data = {\r\n                                    item_name,\r\n                                    utils.round(container.quantity * (10 ^ options.QuantityRoundedDecimals)) / (10 ^ options.QuantityRoundedDecimals),\r\n                                    utils.round(container.volume),\r\n                                    utils.round(container.percent * (10 ^ options.PercentRoundedDecimals)) / (10 ^ options.PercentRoundedDecimals),\r\n                                    container.ingredient.iconPath,\r\n                                    title,\r\n                                    refreshScreen,\r\n                                    container.ingredient.id,\r\n                                    screens_displayed,\r\n                                    utils.round(container.maxvolume),\r\n                                    i,\r\n                                    container.ingredient.tier,\r\n                                }\r\n                                table.insert(items_data_for_screen,storage_data)\r\n                                local to_send=json.encode(storage_data)\r\n                                screen.setScriptInput(to_send)\r\n                                refreshScreen = false\r\n                                while tonumber(screen.getScriptOutput()) ~= i do\r\n                                    coroutine.yield(coroutinesTable[2])\r\n                                end\r\n                                i = i+1\r\n                            end\r\n                        end\r\n                    end\r\n                    local str_data = '{'\r\n                    for i,v in ipairs(items_data_for_screen) do\r\n                        str_data = str_data .. '{\"' .. tostring(v[1]) .. '\",' .. tostring(v[2]) .. ',' .. tostring(v[3]) .. ',' .. tostring(v[4]) .. ',\"' .. tostring(v[5]) .. '\",' .. tostring(v[8]) .. ',' .. tostring(v[10]) .. ',' .. tostring(v[12]) .. '}'\r\n                        if i < #items_data_for_screen then str_data = str_data .. ',' end\r\n                    end\r\n                    str_data = str_data .. '}'\r\n                    local fullRS = getRenderScript(str_data, title)\r\n                    if fullRS:len() < 50000 then --if all can stay on screen then\r\n                        screen.setRenderScript(fullRS)\r\n                    end\r\n                end\r\n                screens_displayed = true\r\n            end\r\n            unit.exit()\r\n            coroutine.yield(coroutinesTable[2])\r\n        else\r\n            coroutine.yield(coroutinesTable[2])\r\n        end\r\n    end\r\n}\r\n\r\nfunction initCoroutines()\r\n    for _,f in pairs(MyCoroutines) do\r\n        local co = coroutine.create(f)\r\n        table.insert(coroutinesTable, co)\r\n    end\r\nend\r\n\r\ninitCoroutines()\r\n\r\nrunCoroutines = function()\r\n    for i,co in ipairs(coroutinesTable) do\r\n        if coroutine.status(co) == \"dead\" then\r\n            coroutinesTable[i] = coroutine.create(MyCoroutines[i])\r\n        end\r\n        if coroutine.status(co) == \"suspended\" then\r\n            assert(coroutine.resume(co))\r\n        end\r\n    end\r\nend\r\n\r\nMainCoroutine = coroutine.create(runCoroutines)\r\n\r\nsystem.showScreen(true)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"}],"methods":[],"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}}}}
